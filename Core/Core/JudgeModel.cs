// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Judge.Model;
//
//    var judgeModel = JudgeModel.FromJson(jsonString);

namespace Judge.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class JudgeModelClass
    {
        [JsonProperty("ConfigInfo", NullValueHandling = NullValueHandling.Ignore)]
        public ConfigInfo ConfigInfo { get; set; }

        [JsonProperty("GetAllSubmissionsParms", NullValueHandling = NullValueHandling.Ignore)]
        public GetAllSubmissionsParms GetAllSubmissionsParms { get; set; }

        [JsonProperty("GetSubmissionParms", NullValueHandling = NullValueHandling.Ignore)]
        public GetSubmissionParms GetSubmissionParms { get; set; }

        [JsonProperty("Languages", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageItem[] Languages { get; set; }

        [JsonProperty("Submission", NullValueHandling = NullValueHandling.Ignore)]
        public Submission Submission { get; set; }

        [JsonProperty("SubmissionParameters", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionParameters SubmissionParameters { get; set; }

        [JsonProperty("SubmissionsPage", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionsPage SubmissionsPage { get; set; }

        [JsonProperty("SubmissionStatuses", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionStatus[] SubmissionStatuses { get; set; }

        [JsonProperty("SystemInfo", NullValueHandling = NullValueHandling.Ignore)]
        public SystemInfo SystemInfo { get; set; }

        [JsonProperty("Workers", NullValueHandling = NullValueHandling.Ignore)]
        public Worker[] Workers { get; set; }
    }

    public partial class ConfigInfo
    {
        [JsonProperty("allow_enable_per_process_and_thread_memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowEnablePerProcessAndThreadMemoryLimit { get; set; }

        [JsonProperty("allow_enable_per_process_and_thread_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowEnablePerProcessAndThreadTimeLimit { get; set; }

        [JsonProperty("cpu_extra_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CpuExtraTime { get; set; }

        [JsonProperty("cpu_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? CpuTimeLimit { get; set; }

        [JsonProperty("enable_per_process_and_thread_memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnablePerProcessAndThreadMemoryLimit { get; set; }

        [JsonProperty("enable_per_process_and_thread_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnablePerProcessAndThreadTimeLimit { get; set; }

        [JsonProperty("enable_wait_result", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableWaitResult { get; set; }

        [JsonProperty("max_cpu_extra_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxCpuExtraTime { get; set; }

        [JsonProperty("max_cpu_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxCpuTimeLimit { get; set; }

        [JsonProperty("max_file_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxFileSize { get; set; }

        [JsonProperty("max_max_file_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxMaxFileSize { get; set; }

        [JsonProperty("max_max_processes_and_or_threads", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxMaxProcessesAndOrThreads { get; set; }

        [JsonProperty("max_memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxMemoryLimit { get; set; }

        [JsonProperty("max_number_of_runs", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxNumberOfRuns { get; set; }

        [JsonProperty("max_processes_and_or_threads", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxProcessesAndOrThreads { get; set; }

        [JsonProperty("max_stack_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxStackLimit { get; set; }

        [JsonProperty("max_wall_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxWallTimeLimit { get; set; }

        [JsonProperty("memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? MemoryLimit { get; set; }

        [JsonProperty("number_of_runs", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfRuns { get; set; }

        [JsonProperty("stack_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? StackLimit { get; set; }

        [JsonProperty("wall_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? WallTimeLimit { get; set; }
    }

    public partial class GetAllSubmissionsParms
    {
        [JsonProperty("base64_encoded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Base64Encoded { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionField[] Fields { get; set; }

        [JsonProperty("page", NullValueHandling = NullValueHandling.Ignore)]
        public long? Page { get; set; }

        [JsonProperty("per_page", NullValueHandling = NullValueHandling.Ignore)]
        public long? PerPage { get; set; }
    }

    public partial class GetSubmissionParms
    {
        [JsonProperty("base64_encoded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Base64Encoded { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionField[] Fields { get; set; }

        [JsonProperty("token", NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }
    }

    public partial class LanguageItem
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class Submission
    {
        [JsonProperty("source_code", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceCode { get; set; }

        [JsonProperty("language_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? LanguageId { get; set; }

        [JsonProperty("number_of_runs", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfRuns { get; set; }

        [JsonProperty("stdin", NullValueHandling = NullValueHandling.Ignore)]
        public string Stdin { get; set; }

        [JsonProperty("expected_output", NullValueHandling = NullValueHandling.Ignore)]
        public string ExpectedOutput { get; set; }

        [JsonProperty("cpu_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? CpuTimeLimit { get; set; }

        [JsonProperty("cpu_extra_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? CpuExtraTime { get; set; }

        [JsonProperty("wall_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? WallTimeLimit { get; set; }

        [JsonProperty("memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? MemoryLimit { get; set; }

        [JsonProperty("stack_limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? StackLimit { get; set; }

        [JsonProperty("max_processes_and_or_threads", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxProcessesAndOrThreads { get; set; }

        [JsonProperty("enable_per_process_and_thread_time_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnablePerProcessAndThreadTimeLimit { get; set; }

        [JsonProperty("enable_per_process_and_thread_memory_limit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnablePerProcessAndThreadMemoryLimit { get; set; }

        [JsonProperty("max_file_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxFileSize { get; set; }
    }

    public partial class SubmissionParameters
    {
        [JsonProperty("base64_encoded", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Base64Encoded { get; set; }

        [JsonProperty("wait", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Wait { get; set; }
    }

    public partial class SubmissionStatus
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }
    }

    public partial class SubmissionsPage
    {
        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("submissions", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionResult[] Submissions { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("current_page", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentPage { get; set; }

        [JsonProperty("next_page", NullValueHandling = NullValueHandling.Ignore)]
        public long? NextPage { get; set; }

        [JsonProperty("prev_page", NullValueHandling = NullValueHandling.Ignore)]
        public long? PrevPage { get; set; }

        [JsonProperty("total_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [JsonProperty("total_pages", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalPages { get; set; }
    }

    public partial class SubmissionResult
    {
        [JsonProperty("compile_output", NullValueHandling = NullValueHandling.Ignore)]
        public string CompileOutput { get; set; }

        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        [JsonProperty("exit_code", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExitCode { get; set; }

        [JsonProperty("exit_signal", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExitSignal { get; set; }

        [JsonProperty("finished_at", NullValueHandling = NullValueHandling.Ignore)]
        public string FinishedAt { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageItem Language { get; set; }

        [JsonProperty("memory", NullValueHandling = NullValueHandling.Ignore)]
        public double? Memory { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public SubmissionStatus Status { get; set; }

        [JsonProperty("status_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? StatusId { get; set; }

        [JsonProperty("stderr", NullValueHandling = NullValueHandling.Ignore)]
        public string Stderr { get; set; }

        [JsonProperty("stdout", NullValueHandling = NullValueHandling.Ignore)]
        public string Stdout { get; set; }

        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public double? Time { get; set; }

        [JsonProperty("token", NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        [JsonProperty("wall_time", NullValueHandling = NullValueHandling.Ignore)]
        public double? WallTime { get; set; }
    }

    public partial class SystemInfo
    {
        [JsonProperty("Architecture", NullValueHandling = NullValueHandling.Ignore)]
        public string Architecture { get; set; }

        [JsonProperty("BogoMIPS", NullValueHandling = NullValueHandling.Ignore)]
        public string BogoMips { get; set; }

        [JsonProperty("Byte Order", NullValueHandling = NullValueHandling.Ignore)]
        public string ByteOrder { get; set; }

        [JsonProperty("Core(s) per socket", NullValueHandling = NullValueHandling.Ignore)]
        public string CoreSPerSocket { get; set; }

        [JsonProperty("CPU family", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuFamily { get; set; }

        [JsonProperty("CPU max MHz", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuMaxMHz { get; set; }

        [JsonProperty("CPU MHz", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuMHz { get; set; }

        [JsonProperty("CPU min MHz", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuMinMHz { get; set; }

        [JsonProperty("CPU op-mode(s)", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuOpModeS { get; set; }

        [JsonProperty("CPU(s)", NullValueHandling = NullValueHandling.Ignore)]
        public string CpuS { get; set; }

        [JsonProperty("L1d cache", NullValueHandling = NullValueHandling.Ignore)]
        public string L1DCache { get; set; }

        [JsonProperty("L1i cache", NullValueHandling = NullValueHandling.Ignore)]
        public string L1ICache { get; set; }

        [JsonProperty("L2 cache", NullValueHandling = NullValueHandling.Ignore)]
        public string L2Cache { get; set; }

        [JsonProperty("L3 cache", NullValueHandling = NullValueHandling.Ignore)]
        public string L3Cache { get; set; }

        [JsonProperty("Mem", NullValueHandling = NullValueHandling.Ignore)]
        public string Mem { get; set; }

        [JsonProperty("Model", NullValueHandling = NullValueHandling.Ignore)]
        public string Model { get; set; }

        [JsonProperty("Model name", NullValueHandling = NullValueHandling.Ignore)]
        public string ModelName { get; set; }

        [JsonProperty("NUMA node(s)", NullValueHandling = NullValueHandling.Ignore)]
        public string NumaNodeS { get; set; }

        [JsonProperty("NUMA node0 CPU(s)", NullValueHandling = NullValueHandling.Ignore)]
        public string NumaNode0CpuS { get; set; }

        [JsonProperty("On-line CPU(s) list", NullValueHandling = NullValueHandling.Ignore)]
        public string OnLineCpuSList { get; set; }

        [JsonProperty("Socket(s)", NullValueHandling = NullValueHandling.Ignore)]
        public string SocketS { get; set; }

        [JsonProperty("Stepping", NullValueHandling = NullValueHandling.Ignore)]
        public string Stepping { get; set; }

        [JsonProperty("Swap", NullValueHandling = NullValueHandling.Ignore)]
        public string Swap { get; set; }

        [JsonProperty("Thread(s) per core", NullValueHandling = NullValueHandling.Ignore)]
        public string ThreadSPerCore { get; set; }

        [JsonProperty("Vendor ID", NullValueHandling = NullValueHandling.Ignore)]
        public string VendorId { get; set; }

        [JsonProperty("Virtualization", NullValueHandling = NullValueHandling.Ignore)]
        public string Virtualization { get; set; }
    }

    public partial class Worker
    {
        [JsonProperty("available", NullValueHandling = NullValueHandling.Ignore)]
        public long? Available { get; set; }

        [JsonProperty("failed", NullValueHandling = NullValueHandling.Ignore)]
        public long? Failed { get; set; }

        [JsonProperty("idle", NullValueHandling = NullValueHandling.Ignore)]
        public long? Idle { get; set; }

        [JsonProperty("paused", NullValueHandling = NullValueHandling.Ignore)]
        public long? Paused { get; set; }

        [JsonProperty("queue", NullValueHandling = NullValueHandling.Ignore)]
        public string Queue { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [JsonProperty("working", NullValueHandling = NullValueHandling.Ignore)]
        public long? Working { get; set; }
    }

    public enum SubmissionField { CompileOutput, Language, Memory, Message, Status, Stderr, Stdout, Time, Token };

    public partial struct JudgeModelUnion
    {
        public object[] AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public JudgeModelClass JudgeModelClass;
        public string String;

        public static implicit operator JudgeModelUnion(object[] AnythingArray) => new JudgeModelUnion { AnythingArray = AnythingArray };
        public static implicit operator JudgeModelUnion(bool Bool) => new JudgeModelUnion { Bool = Bool };
        public static implicit operator JudgeModelUnion(double Double) => new JudgeModelUnion { Double = Double };
        public static implicit operator JudgeModelUnion(long Integer) => new JudgeModelUnion { Integer = Integer };
        public static implicit operator JudgeModelUnion(JudgeModelClass JudgeModelClass) => new JudgeModelUnion { JudgeModelClass = JudgeModelClass };
        public static implicit operator JudgeModelUnion(string String) => new JudgeModelUnion { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && JudgeModelClass == null && Double == null && Integer == null && String == null;
    }

    public class JudgeModel
    {
        public static object FromJson(string json) => JsonConvert.DeserializeObject<object>(json, Judge.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this object self) => JsonConvert.SerializeObject(self, Judge.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                JudgeModelUnionConverter.Singleton,
                SubmissionFieldConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class JudgeModelUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(JudgeModelUnion) || t == typeof(JudgeModelUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new JudgeModelUnion { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new JudgeModelUnion { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new JudgeModelUnion { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new JudgeModelUnion { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new JudgeModelUnion { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<JudgeModelClass>(reader);
                    return new JudgeModelUnion { JudgeModelClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<object[]>(reader);
                    return new JudgeModelUnion { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type JudgeModelUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (JudgeModelUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.JudgeModelClass != null)
            {
                serializer.Serialize(writer, value.JudgeModelClass);
                return;
            }
            throw new Exception("Cannot marshal type JudgeModelUnion");
        }

        public static readonly JudgeModelUnionConverter Singleton = new JudgeModelUnionConverter();
    }

    internal class SubmissionFieldConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SubmissionField) || t == typeof(SubmissionField?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "compile_output":
                    return SubmissionField.CompileOutput;
                case "language":
                    return SubmissionField.Language;
                case "memory":
                    return SubmissionField.Memory;
                case "message":
                    return SubmissionField.Message;
                case "status":
                    return SubmissionField.Status;
                case "stderr":
                    return SubmissionField.Stderr;
                case "stdout":
                    return SubmissionField.Stdout;
                case "time":
                    return SubmissionField.Time;
                case "token":
                    return SubmissionField.Token;
            }
            throw new Exception("Cannot unmarshal type SubmissionField");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SubmissionField)untypedValue;
            switch (value)
            {
                case SubmissionField.CompileOutput:
                    serializer.Serialize(writer, "compile_output");
                    return;
                case SubmissionField.Language:
                    serializer.Serialize(writer, "language");
                    return;
                case SubmissionField.Memory:
                    serializer.Serialize(writer, "memory");
                    return;
                case SubmissionField.Message:
                    serializer.Serialize(writer, "message");
                    return;
                case SubmissionField.Status:
                    serializer.Serialize(writer, "status");
                    return;
                case SubmissionField.Stderr:
                    serializer.Serialize(writer, "stderr");
                    return;
                case SubmissionField.Stdout:
                    serializer.Serialize(writer, "stdout");
                    return;
                case SubmissionField.Time:
                    serializer.Serialize(writer, "time");
                    return;
                case SubmissionField.Token:
                    serializer.Serialize(writer, "token");
                    return;
            }
            throw new Exception("Cannot marshal type SubmissionField");
        }

        public static readonly SubmissionFieldConverter Singleton = new SubmissionFieldConverter();
    }
}
